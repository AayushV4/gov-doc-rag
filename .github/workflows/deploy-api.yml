name: Deploy API
on:
  push:
    branches: [ main ]
    paths:
      - 'services/api/**'
      - '.github/workflows/deploy-api.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  security-events: write  # Add this for Trivy

env:
  AWS_REGION: us-east-1
  ACCOUNT_ID: "023268101038"
  ECR_REPOSITORY: gov-doc-rag-api
  EKS_CLUSTER: gov-doc-rag-cluster
  K8S_NAMESPACE: gov-doc-rag
  DEPLOYMENT_NAME: api
  CONTAINER_NAME: api
  TOPIC_ARN: arn:aws:sns:us-east-1:023268101038:gov-doc-rag-alerts  # Add this

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::023268101038:role/gov-doc-rag-deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Who am I? (verify AWS creds)
        run: aws sts get-caller-identity

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$ECR_REPOSITORY" --image-scanning-configuration scanOnPush=true

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Compute image tag
        id: tag
        run: echo "tag=${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$(date -u +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./services/api/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.tag.outputs.tag }}

      # ADD THIS: Security scanning
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.tag.outputs.tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Update kubeconfig
        run: |
          KCFG="$RUNNER_TEMP/kubeconfig"
          aws eks update-kubeconfig --region "${{ env.AWS_REGION }}" --name "${{ env.EKS_CLUSTER }}" --alias "gha-${{ env.EKS_CLUSTER }}" --kubeconfig "$KCFG"
          echo "KUBECONFIG=$KCFG" >> "$GITHUB_ENV"

      - name: Apply base manifests
        run: kubectl apply --server-side -f k8s/base

      - name: Can we get a token?
        run: aws eks get-token --region "${{ env.AWS_REGION }}" --cluster-name "${{ env.EKS_CLUSTER }}" >/dev/null

      - name: Check cluster
        run: kubectl --request-timeout=20s cluster-info

      - name: Rollout new image
        env:
          IMG: ${{ steps.tag.outputs.tag }}
        run: |
          kubectl -n "${{ env.K8S_NAMESPACE }}" set image deploy/"${{ env.DEPLOYMENT_NAME }}" "${{ env.CONTAINER_NAME }}"="$IMG"
          kubectl -n "${{ env.K8S_NAMESPACE }}" rollout status deploy/"${{ env.DEPLOYMENT_NAME }}" --timeout=5m

      - name: Wait for pods Ready
        run: kubectl -n "${{ env.K8S_NAMESPACE }}" wait deploy/"${{ env.DEPLOYMENT_NAME }}" --for=condition=available --timeout=3m

      - name: Smoke test
        run: |
          for i in {1..12}; do
            code=$(curl -fsS -o /dev/null -w "%{http_code}" https://api.fedocx.online/health || true)
            if [ "$code" = "200" ]; then
              echo "✓ API is responding (HTTP $code)"
              exit 0
            fi
            echo "Attempt $i: HTTP $code - retrying..."
            sleep 10
          done
          echo "✗ API health check failed"
          exit 1

      # ADD THIS: Success notification
      - name: Notify success
        if: success()
        run: |
          MSG="API deployed successfully: ${{ steps.tag.outputs.tag }}"
          aws sns publish --topic-arn "$TOPIC_ARN" --message "$MSG" --subject "✓ API Deploy Success"

      - name: Roll back on failure
        if: failure()
        run: |
          echo "Deployment failed - rolling back to previous version"
          kubectl -n "${{ env.K8S_NAMESPACE }}" rollout undo deploy/"${{ env.DEPLOYMENT_NAME }}"
          kubectl -n "${{ env.K8S_NAMESPACE }}" rollout status deploy/"${{ env.DEPLOYMENT_NAME }}" --timeout=5m

          MSG="API deploy failed and rolled back: repo=${{ github.repository }}, run_id=${{ github.run_id }}, commit=${{ github.sha }}"
          aws sns publish --topic-arn "$TOPIC_ARN" --message "$MSG" --subject "✗ API Deploy Failed"

      - name: Rollout status (with fallback)
        if: always()
        env:
          NS: ${{ env.K8S_NAMESPACE }}
          DEPLOY: ${{ env.DEPLOYMENT_NAME }}
        run: |
          set -e
          if ! kubectl -n "$NS" rollout status deploy/"$DEPLOY" --timeout=3m; then
            echo "Rollout failed — performing rollback"
            kubectl -n "$NS" rollout undo deploy/"$DEPLOY"
            kubectl -n "$NS" rollout status deploy/"$DEPLOY" --timeout=3m
            exit 1
          fi
